def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

// 配置打包签名文件
def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    compileSdkVersion 28

    lintOptions {
        disable 'InvalidPackage'
        checkReleaseBuilds false
        abortOnError false
    }

    defaultConfig {
        applicationId "com.jxtele.pollution_source"
        // 为了使用图片选择器插件 minSdkVersion改成19
        minSdkVersion 19
        targetSdkVersion 28
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    // 签名配置
    signingConfigs {
        jiangxi {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storePassword keystoreProperties['storePassword']
            storeFile file(keystoreProperties['storeFile'])
        }
        gaoan {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storePassword keystoreProperties['storePassword']
            storeFile file(keystoreProperties['storeFileGaoAn'])
        }
    }

    buildTypes {
        debug {
            manifestPlaceholders = [APP_NAME     : "测试污染源监控",
                                    JPUSH_PKGNAME: "com.jxtele.pollution_source",
                                    JPUSH_APPKEY : "eb5a21dcceead742e52f47a5",
                                    JPUSH_CHANNEL: "developer-default",
            ]
            ndk {
                abiFilters 'armeabi', 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
            }
        }
        // jiangxi
        release {
            manifestPlaceholders = [APP_NAME     : "江西污染源监控",
                                    JPUSH_PKGNAME: "com.jxtele.pollution_source",
                                    JPUSH_APPKEY : "eb5a21dcceead742e52f47a5",
                                    JPUSH_CHANNEL: "developer-default",
            ]
            signingConfig signingConfigs.jiangxi
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            ndk {
                abiFilters 'armeabi', 'armeabi-v7a'
            }
        }
        // gaoan
        /*release {
            manifestPlaceholders = [APP_NAME     : "高安污染源监控",
                                    JPUSH_PKGNAME: "com.jxtele.pollution_source.gaoan",
                                    JPUSH_APPKEY : "b92d8682f1baad09b089c2d8",
                                    JPUSH_CHANNEL: "developer-default",
            ]
            applicationIdSuffix ".gaoan"
            signingConfig signingConfigs.gaoan
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            ndk {
                abiFilters 'armeabi', 'armeabi-v7a'
            }
        }*/
    }
}

flutter {
    source '../..'
}

dependencies {
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
}
